import telebot
from telebot import types
import random
import json

TOKEN = '8179088457:AAF1KMTfZM82LBaOGpGOD1d4l0WvglsHlj0'
bot = telebot.TeleBot(TOKEN)

def load_cats_data():
    try:
        with open('cat_photos.json', 'r', encoding='utf-8') as file:
            cats_data = json.load(file)
            return {cat_type: {**data, 'votes': 0} for cat_type, data in cats_data.items()}
    except FileNotFoundError:
        print("–§–∞–π–ª cats_photos.json –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return {}
    except json.JSONDecodeError:
        print("–û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ JSON-—Ñ–∞–π–ª–∞")
        return {}

cats_db = load_cats_data()

@bot.message_handler(commands=['start'])
def start(message):
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    btn1 = types.KeyboardButton('üê± –í—ã–±—Ä–∞—Ç—å –∫–æ—Ç–∏–∫–∞')
    btn2 = types.KeyboardButton('üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è')
    btn3 = types.KeyboardButton('‚ÑπÔ∏è –û –ø—Ä–æ–µ–∫—Ç–µ')
    markup.add(btn1, btn2, btn3)

    bot.send_message(message.chat.id,
                    "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ CatVoteBot!\n"
                    "–ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ –≥–æ–ª–æ—Å–æ–≤–∞—Ç—å –∑–∞ —Å–∞–º—ã—Ö –∫—Ä–∞—Å–∏–≤—ã—Ö –∫–æ—Ç–∏–∫–æ–≤.",
                    reply_markup=markup)

@bot.message_handler(content_types=['text'])
def handle_text(message):
    chat_id = message.chat.id

    if message.text == 'üê± –í—ã–±—Ä–∞—Ç—å –∫–æ—Ç–∏–∫–∞':
        send_cat_selection(chat_id)
    elif message.text == 'üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è':
        send_vote_results(chat_id)
    elif message.text == '‚ÑπÔ∏è –û –ø—Ä–æ–µ–∫—Ç–µ':
        bot.send_message(chat_id,
                        "CatVoteBot - —Å–∏—Å—Ç–µ–º–∞ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è –∑–∞ –∫–æ—Ç–∏–∫–æ–≤\n"
                        "–†–∞–∑—Ä–∞–±–æ—Ç–∞–Ω–æ –¥–ª—è –ª–∞–±–æ—Ä–∞—Ç–æ—Ä–Ω–æ–π —Ä–∞–±–æ—Ç—ã –ø–æ —Å–æ–∑–¥–∞–Ω–∏—é inline-–º–µ–Ω—é")

def send_cat_selection(chat_id):
    if not cats_db:
        bot.send_message(chat_id, "–ò–∑–≤–∏–Ω–∏—Ç–µ, –¥–∞–Ω–Ω—ã–µ –æ –∫–æ—Ç–∏–∫–∞—Ö –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã.")
        return

    keyboard = types.InlineKeyboardMarkup(row_width=2)
    buttons = []

    for cat_type in cats_db.keys():
        btn = types.InlineKeyboardButton(
            text=f'{cat_type} ({cats_db[cat_type]["votes"]}‚ù§Ô∏è)',
            callback_data=f'cat_{cat_type}')
        buttons.append(btn)

    keyboard.add(*buttons)
    bot.send_message(chat_id,
                    "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –∫–æ—Ç–∏–∫–∞:",
                    reply_markup=keyboard)

def send_vote_results(chat_id):
    if not cats_db:
        bot.send_message(chat_id, "–ò–∑–≤–∏–Ω–∏—Ç–µ, –¥–∞–Ω–Ω—ã–µ –æ –∫–æ—Ç–∏–∫–∞—Ö –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã.")
        return

    results = ["üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è:"]
    total_votes = sum(cat['votes'] for cat in cats_db.values())

    for cat_type, data in cats_db.items():
        percent = (data['votes'] / total_votes * 100) if total_votes > 0 else 0
        results.append(
            f"{cat_type}: {data['votes']} –≥–æ–ª–æ—Å–æ–≤ ({percent:.1f}%)")

    bot.send_message(chat_id, "\n".join(results))

def send_cat_options(chat_id, cat_type):
    if cat_type not in cats_db:
        bot.send_message(chat_id, "–ò–∑–≤–∏–Ω–∏—Ç–µ, —ç—Ç–æ—Ç —Ç–∏–ø –∫–æ—Ç–∏–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return

    cat_data = cats_db[cat_type]
    photo_url = random.choice(cat_data['photos'])

    keyboard = types.InlineKeyboardMarkup()
    btn_vote = types.InlineKeyboardButton(
        text=f'‚ù§Ô∏è –ü—Ä–æ–≥–æ–ª–æ—Å–æ–≤–∞—Ç—å –∑–∞ —ç—Ç–æ–≥–æ –∫–æ—Ç–∏–∫–∞ ({cat_data["votes"]})',
        callback_data=f'vote_{cat_type}')
    btn_back = types.InlineKeyboardButton(
        text='üîô –ö –≤—ã–±–æ—Ä—É –∫–æ—Ç–∏–∫–æ–≤',
        callback_data='back_to_cats')
    keyboard.add(btn_vote)
    keyboard.add(btn_back)

    bot.send_photo(chat_id, photo_url,
                  caption=f"{cat_type} –∫–æ—Ç–∏–∫\n{cat_data['description']}",
                  reply_markup=keyboard)

@bot.callback_query_handler(func=lambda call: True)
def callback_inline(call):
    chat_id = call.message.chat.id
    message_id = call.message.message_id

    if call.data.startswith('cat_'):
        cat_type = call.data[4:]
        send_cat_options(chat_id, cat_type)
        bot.answer_callback_query(call.id)

    elif call.data.startswith('vote_'):
        cat_type = call.data[5:]
        if cat_type in cats_db:
            cats_db[cat_type]['votes'] += 1

            try:
                bot.answer_callback_query(
                    call.id,
                    f"–í—ã –ø—Ä–æ–≥–æ–ª–æ—Å–æ–≤–∞–ª–∏ –∑–∞ {cat_type} –∫–æ—Ç–∏–∫–∞!")

                cat_data = cats_db[cat_type]
                keyboard = types.InlineKeyboardMarkup()
                btn_vote = types.InlineKeyboardButton(
                    text=f'‚ù§Ô∏è –ü—Ä–æ–≥–æ–ª–æ—Å–æ–≤–∞—Ç—å –∑–∞ —ç—Ç–æ–≥–æ –∫–æ—Ç–∏–∫–∞ ({cat_data["votes"]})',
                    callback_data=f'vote_{cat_type}')
                btn_back = types.InlineKeyboardButton(
                    text='üîô –ö –≤—ã–±–æ—Ä—É –∫–æ—Ç–∏–∫–æ–≤',
                    callback_data='back_to_cats')
                keyboard.add(btn_vote)
                keyboard.add(btn_back)

                bot.edit_message_reply_markup(
                    chat_id=chat_id,
                    message_id=message_id,
                    reply_markup=keyboard)
            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")

    elif call.data == 'back_to_cats':
        bot.delete_message(chat_id, message_id)
        send_cat_selection(chat_id)
        bot.answer_callback_query(call.id)

if __name__ == '__main__':
    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ –≥–æ—Ç–æ–≤ –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å –∫–æ—Ç–∏–∫–æ–≤!")
    bot.polling(none_stop=True)